name: üöÄ Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string
  push:
    branches: [ main, staging ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # ==========================================
  # PRE-DEPLOYMENT CHECKS
  # ==========================================
  pre-deployment:
    name: üîç Pre-Deployment Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üåç Determine Environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: üè∑Ô∏è Determine Version
      id: version
      run: |
        if [[ "${{ github.event.inputs.version }}" != "" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi

    - name: üîç Pre-deployment Checks
      id: checks
      run: |
        echo "üîç Running pre-deployment checks..."
        
        # Check if required secrets are available
        if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
          if [[ -z "${{ secrets.KUBECONFIG_PRODUCTION }}" ]]; then
            echo "‚ùå Production KUBECONFIG secret not found"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          if [[ -z "${{ secrets.KUBECONFIG_STAGING }}" ]]; then
            echo "‚ùå Staging KUBECONFIG secret not found"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
        
        echo "‚úÖ Pre-deployment checks passed"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

  # ==========================================
  # DEPLOYMENT
  # ==========================================
  deploy:
    name: üöÄ Deploy to ${{ needs.pre-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: üîê Setup Kubeconfig
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: üèóÔ∏è Update Image Tags
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update backend image tag
        sed -i "s|ghcr.io/.*-backend:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ needs.pre-deployment.outputs.version }}|g" k8s/backend.yaml
        
        # Update frontend image tag
        sed -i "s|ghcr.io/.*-frontend:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.pre-deployment.outputs.version }}|g" k8s/frontend.yaml
        
        # Update namespace for environment
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          sed -i "s|name: trading-app|name: trading-app-staging|g" k8s/namespace.yaml
          sed -i "s|namespace: trading-app|namespace: trading-app-staging|g" k8s/*.yaml
        fi

    - name: üöÄ Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "üöÄ Deploying to ${{ needs.pre-deployment.outputs.environment }} environment..."
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/frontend.yaml

    - name: ‚è≥ Wait for Deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "‚è≥ Waiting for deployments to be ready..."
        kubectl rollout status deployment/backend -n $namespace --timeout=600s
        kubectl rollout status deployment/frontend -n $namespace --timeout=600s

    - name: üè• Health Check
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üè• Running health checks..."
        
        # Backend health check
        kubectl run test-backend-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          curl -f http://backend-service:5000/health
        
        # Frontend health check
        kubectl run test-frontend-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          curl -f http://frontend-service:80/health

    - name: üß™ Smoke Tests
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üß™ Running smoke tests..."
        
        # Test critical endpoints
        kubectl run smoke-test-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          sh -c "
            echo 'Testing backend API...'
            curl -f http://backend-service:5000/api/products || exit 1
            echo 'Testing frontend...'
            curl -f http://frontend-service:80/ || exit 1
            echo '‚úÖ All smoke tests passed!'
          "

    - name: üìä Deployment Summary
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Environment: ${{ needs.pre-deployment.outputs.environment }}"
        echo "Version: ${{ needs.pre-deployment.outputs.version }}"
        echo "Namespace: $namespace"
        echo ""
        echo "Deployed Resources:"
        kubectl get pods -n $namespace
        kubectl get services -n $namespace
        kubectl get ingress -n $namespace

  # ==========================================
  # POST-DEPLOYMENT VALIDATION
  # ==========================================
  post-deployment:
    name: ‚úÖ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy]
    if: needs.pre-deployment.outputs.should-deploy == 'true' && success()
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: üîê Setup Kubeconfig
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: üß™ Run Integration Tests
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üß™ Running post-deployment integration tests..."
        
        # Port forward to access services
        kubectl port-forward -n $namespace svc/backend-service 8080:5000 &
        kubectl port-forward -n $namespace svc/frontend-service 8081:80 &
        
        sleep 10
        
        # Run integration tests
        kubectl run integration-test-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          sh -c "
            echo 'Testing authentication flow...'
            TOKEN=\$(curl -s -X POST http://backend-service:5000/api/auth/login \
              -H 'Content-Type: application/json' \
              -d '{\"email\":\"user@tradingapp.com\",\"password\":\"password123\"}' | \
              grep -o '\"token\":\"[^\"]*\"' | cut -d'\"' -f4)
            
            if [ -z \"\$TOKEN\" ]; then
              echo '‚ùå Authentication test failed'
              exit 1
            fi
            
            echo 'Testing protected endpoints...'
            curl -f -H \"Authorization: Bearer \$TOKEN\" http://backend-service:5000/api/auth/profile || exit 1
            curl -f -H \"Authorization: Bearer \$TOKEN\" http://backend-service:5000/api/portfolio || exit 1
            
            echo '‚úÖ All integration tests passed!'
          "

    - name: üìä Performance Check
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üìä Running performance checks..."
        
        # Check response times
        kubectl run perf-test-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          sh -c "
            echo 'Testing response times...'
            
            # Health endpoint
            START=\$(date +%s%N)
            curl -f http://backend-service:5000/health > /dev/null
            END=\$(date +%s%N)
            HEALTH_TIME=\$(( (END - START) / 1000000 ))
            echo \"Health endpoint: \${HEALTH_TIME}ms\"
            
            # Products endpoint
            START=\$(date +%s%N)
            curl -f http://backend-service:5000/api/products > /dev/null
            END=\$(date +%s%N)
            PRODUCTS_TIME=\$(( (END - START) / 1000000 ))
            echo \"Products endpoint: \${PRODUCTS_TIME}ms\"
            
            # Check if response times are acceptable (< 1000ms)
            if [ \$HEALTH_TIME -gt 1000 ] || [ \$PRODUCTS_TIME -gt 1000 ]; then
              echo '‚ùå Performance check failed - response times too high'
              exit 1
            fi
            
            echo '‚úÖ Performance checks passed!'
          "

  # ==========================================
  # ROLLBACK (ON FAILURE)
  # ==========================================
  rollback:
    name: üîÑ Rollback Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy, post-deployment]
    if: failure() && needs.pre-deployment.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: üîê Setup Kubeconfig
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: üîÑ Rollback Deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üîÑ Rolling back deployment in ${{ needs.pre-deployment.outputs.environment }} environment..."
        
        # Rollback deployments
        kubectl rollout undo deployment/backend -n $namespace
        kubectl rollout undo deployment/frontend -n $namespace
        
        # Wait for rollback to complete
        kubectl rollout status deployment/backend -n $namespace --timeout=300s
        kubectl rollout status deployment/frontend -n $namespace --timeout=300s
        
        echo "‚úÖ Rollback completed successfully"

    - name: üìä Rollback Summary
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "üìä Rollback Summary"
        echo "=================="
        echo "Environment: ${{ needs.pre-deployment.outputs.environment }}"
        echo "Namespace: $namespace"
        echo ""
        echo "Current Status:"
        kubectl get pods -n $namespace

  # ==========================================
  # NOTIFICATION
  # ==========================================
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy, post-deployment, rollback]
    if: always()
    
    steps:
    - name: üì¢ Slack Notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üöÄ Deployment Status: ${{ job.status }}
          üì¶ Service: Trading App
          üåç Environment: ${{ needs.pre-deployment.outputs.environment }}
          üè∑Ô∏è Version: ${{ needs.pre-deployment.outputs.version }}
          üë§ Triggered by: ${{ github.actor }}
          üîó Commit: ${{ github.sha }}
          üìã Summary: ${{ needs.deploy.result }} - ${{ needs.post-deployment.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: üìß Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'üöÄ Trading App Deployment - ${{ job.status }}'
        body: |
          Deployment ${{ job.status }} for Trading App
          
          Environment: ${{ needs.pre-deployment.outputs.environment }}
          Version: ${{ needs.pre-deployment.outputs.version }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please check the logs for details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}
