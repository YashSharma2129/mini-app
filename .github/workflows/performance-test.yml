name: ⚡ Performance Testing

on:
  workflow_dispatch:
    inputs:
      load_type:
        description: 'Type of load test'
        required: true
        default: 'normal'
        type: choice
        options:
        - light
        - normal
        - heavy
        - stress
  push:
    branches: [ main, staging ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/performance-test.yml'

jobs:
  lighthouse-audit:
    name: 🏗️ Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: 🔧 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: 🚀 Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview &
        sleep 15
        
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:4173/ >/dev/null 2>&1; then
            echo "✅ Frontend server is ready"
            break
          fi
          echo "⏳ Waiting for frontend server... ($i/30)"
          sleep 2
        done
        
        # Verify server is running
        curl -f http://localhost:4173/ || (echo "❌ Frontend server failed to start" && exit 1)

    - name: 🔍 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 📊 Upload Lighthouse Reports
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports-${{ github.run_id }}
        path: |
          .lighthouseci/
          lighthouse-report.json

  load-test:
    name: 🚀 Load Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trading_app_perf
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: 🔧 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🗄️ Setup test database
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_perf
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npm run seed

    - name: 🚀 Start backend server
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_perf
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npm start &
        sleep 15

    - name: ⚡ Run Artillery Load Tests
      run: |
        npm install -g artillery
        case "${{ github.event.inputs.load_type || 'normal' }}" in
          "light")
            artillery run backend/artillery-light.yml --output artillery-report.json
            ;;
          "normal")
            artillery run backend/artillery.yml --output artillery-report.json
            ;;
          "heavy")
            artillery run backend/artillery-heavy.yml --output artillery-report.json
            ;;
          "stress")
            artillery run backend/artillery-stress.yml --output artillery-report.json
            ;;
        esac
        
        # Generate HTML report
        artillery report artillery-report.json --output artillery-results.html

    - name: 📊 Upload Load Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: artillery-reports-${{ github.event.inputs.load_type || 'normal' }}-${{ github.run_id }}
        path: |
          artillery-report.json
          artillery-results.html

  memory-leak-test:
    name: 🧠 Memory Leak Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trading_app_memory
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: 🔧 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🚀 Start backend with memory profiling
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_memory
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        node --inspect --max-old-space-size=512 src/server.js &
        sleep 10

    - name: 🧠 Run memory stress test
      run: |
        npm install -g artillery
        artillery run backend/artillery-memory.yml

    - name: 📊 Generate memory report
      run: |
        # Generate memory usage report
        echo "Memory usage report:" > memory-report.txt
        ps aux | grep node >> memory-report.txt
        echo "Heap usage:" >> memory-report.txt
        curl -s http://localhost:9229/json | jq '.[0].title' >> memory-report.txt || echo "Inspector not available" >> memory-report.txt
        
        # List files to debug
        ls -la
        echo "Generated memory-report.txt:"
        cat memory-report.txt

    - name: 📊 Upload Memory Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: memory-reports-${{ github.run_id }}
        path: |
          memory-report.txt
          memory-*.heapsnapshot

  performance-summary:
    name: 📋 Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, load-test, memory-leak-test]
    if: always()
    
    steps:
    - name: 📋 Performance Summary
      run: |
        echo "⚡ Performance Test Summary"
        echo "=========================="
        echo "✅ Lighthouse Audit: ${{ needs.lighthouse-audit.result }}"
        echo "✅ Load Testing: ${{ needs.load-test.result }}"
        echo "✅ Memory Leak Test: ${{ needs.memory-leak-test.result }}"
        
        if [[ "${{ needs.lighthouse-audit.result }}" == "failure" || 
              "${{ needs.load-test.result }}" == "failure" || 
              "${{ needs.memory-leak-test.result }}" == "failure" ]]; then
          echo "❌ Some performance tests failed!"
          exit 1
        else
          echo "✅ All performance tests passed!"
        fi
