name: 📊 Monitoring & Alerting

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - health
        - performance
        - security
        - availability

env:
  REGISTRY: ghcr.io

jobs:
  # ==========================================
  # HEALTH MONITORING
  # ==========================================
  health-check:
    name: 🏥 Health Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'health' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔐 Setup Kubeconfig
      run: |
        if [[ "${{ matrix.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: 🏥 Health Check
      id: health
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ matrix.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "🏥 Checking health for ${{ matrix.environment }} environment..."
        
        # Check pod status
        PODS=$(kubectl get pods -n $namespace -o json | jq -r '.items[] | select(.metadata.labels.app | contains("backend") or contains("frontend")) | .metadata.name + ":" + .status.phase')
        
        HEALTHY=true
        for pod in $PODS; do
          name=$(echo $pod | cut -d: -f1)
          status=$(echo $pod | cut -d: -f2)
          if [[ "$status" != "Running" ]]; then
            echo "❌ Pod $name is not running (status: $status)"
            HEALTHY=false
          else
            echo "✅ Pod $name is running"
          fi
        done
        
        # Check service endpoints
        kubectl run health-check-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          sh -c "
            echo 'Testing backend health endpoint...'
            curl -f http://backend-service:5000/health || exit 1
            
            echo 'Testing frontend health endpoint...'
            curl -f http://frontend-service:80/health || exit 1
            
            echo '✅ All health checks passed'
          " || HEALTHY=false
        
        if [[ "$HEALTHY" == "true" ]]; then
          echo "health_status=healthy" >> $GITHUB_OUTPUT
        else
          echo "health_status=unhealthy" >> $GITHUB_OUTPUT
        fi

    - name: 📢 Health Alert
      if: steps.health.outputs.health_status == 'unhealthy'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          🚨 HEALTH ALERT 🚨
          Environment: ${{ matrix.environment }}
          Status: UNHEALTHY
          Time: $(date)
          Check logs for details
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # PERFORMANCE MONITORING
  # ==========================================
  performance-check:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔐 Setup Kubeconfig
      run: |
        if [[ "${{ matrix.environment }}" == "production" ]]; then
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig

    - name: ⚡ Performance Check
      id: performance
      run: |
        export KUBECONFIG=kubeconfig
        
        namespace="trading-app"
        if [[ "${{ matrix.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "⚡ Checking performance for ${{ matrix.environment }} environment..."
        
        # Check resource usage
        kubectl run perf-check-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never -n $namespace -- \
          sh -c "
            echo 'Testing response times...'
            
            # Health endpoint
            START=\$(date +%s%N)
            curl -f http://backend-service:5000/health > /dev/null
            END=\$(date +%s%N)
            HEALTH_TIME=\$(( (END - START) / 1000000 ))
            echo \"Health endpoint: \${HEALTH_TIME}ms\"
            
            # Products endpoint
            START=\$(date +%s%N)
            curl -f http://backend-service:5000/api/products > /dev/null
            END=\$(date +%s%N)
            PRODUCTS_TIME=\$(( (END - START) / 1000000 ))
            echo \"Products endpoint: \${PRODUCTS_TIME}ms\"
            
            # Check thresholds
            if [ \$HEALTH_TIME -gt 2000 ]; then
              echo '❌ Health endpoint too slow: '\${HEALTH_TIME}ms
              exit 1
            fi
            
            if [ \$PRODUCTS_TIME -gt 3000 ]; then
              echo '❌ Products endpoint too slow: '\${PRODUCTS_TIME}ms
              exit 1
            fi
            
            echo '✅ Performance checks passed'
          " || echo "performance_status=slow" >> $GITHUB_OUTPUT
        
        if [[ ! -f $GITHUB_OUTPUT ]] || ! grep -q "performance_status" $GITHUB_OUTPUT; then
          echo "performance_status=good" >> $GITHUB_OUTPUT
        fi

    - name: 📢 Performance Alert
      if: steps.performance.outputs.performance_status == 'slow'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          ⚡ PERFORMANCE ALERT ⚡
          Environment: ${{ matrix.environment }}
          Status: SLOW RESPONSE TIMES
          Time: $(date)
          Check performance metrics
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # AVAILABILITY MONITORING
  # ==========================================
  availability-check:
    name: 🌐 Availability Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'availability' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌐 Availability Check
      id: availability
      run: |
        namespace="trading-app"
        if [[ "${{ matrix.environment }}" == "staging" ]]; then
          namespace="trading-app-staging"
        fi
        
        echo "🌐 Checking availability for ${{ matrix.environment }} environment..."
        
        # Simulate external availability check
        if [[ "${{ matrix.environment }}" == "production" ]]; then
          # Check if production URL is accessible
          if curl -f -s --max-time 30 https://your-production-domain.com/health > /dev/null; then
            echo "availability_status=available" >> $GITHUB_OUTPUT
          else
            echo "availability_status=unavailable" >> $GITHUB_OUTPUT
          fi
        else
          # For staging, we'll assume it's available if we can reach it internally
          echo "availability_status=available" >> $GITHUB_OUTPUT
        fi

    - name: 📢 Availability Alert
      if: steps.availability.outputs.availability_status == 'unavailable'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          🌐 AVAILABILITY ALERT 🌐
          Environment: ${{ matrix.environment }}
          Status: UNAVAILABLE
          Time: $(date)
          Service appears to be down
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # SECURITY MONITORING
  # ==========================================
  security-check:
    name: 🔒 Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Security Check
      id: security
      run: |
        echo "🔒 Running security checks..."
        
        # Check for recent security vulnerabilities
        npm audit --audit-level moderate --json > audit-report.json || true
        
        # Check if there are high or critical vulnerabilities
        HIGH_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
        
        if [[ "$HIGH_VULNS" -gt 0 ]] || [[ "$CRITICAL_VULNS" -gt 0 ]]; then
          echo "security_status=vulnerable" >> $GITHUB_OUTPUT
          echo "❌ Found $CRITICAL_VULNS critical and $HIGH_VULNS high vulnerabilities"
        else
          echo "security_status=secure" >> $GITHUB_OUTPUT
          echo "✅ No critical or high vulnerabilities found"
        fi

    - name: 📢 Security Alert
      if: steps.security.outputs.security_status == 'vulnerable'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          🔒 SECURITY ALERT 🔒
          Status: VULNERABILITIES DETECTED
          Time: $(date)
          Check security scan results
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # METRICS COLLECTION
  # ==========================================
  metrics-collection:
    name: 📊 Metrics Collection
    runs-on: ubuntu-latest
    if: always()
    needs: [health-check, performance-check, availability-check, security-check]
    
    steps:
    - name: 📊 Collect Metrics
      run: |
        echo "📊 Collecting monitoring metrics..."
        
        # Create metrics summary
        cat > metrics-summary.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "health": {
            "staging": "${{ needs.health-check.outputs.health_status }}",
            "production": "${{ needs.health-check.outputs.health_status }}"
          },
          "performance": {
            "staging": "${{ needs.performance-check.outputs.performance_status }}",
            "production": "${{ needs.performance-check.outputs.performance_status }}"
          },
          "availability": {
            "staging": "${{ needs.availability-check.outputs.availability_status }}",
            "production": "${{ needs.availability-check.outputs.availability_status }}"
          },
          "security": "${{ needs.security-check.outputs.security_status }}"
        }
        EOF
        
        cat metrics-summary.json

    - name: 📊 Upload Metrics
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-metrics-${{ github.run_id }}
        path: metrics-summary.json

  # ==========================================
  # SUMMARY NOTIFICATION
  # ==========================================
  summary:
    name: 📋 Monitoring Summary
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, availability-check, security-check]
    if: always()
    
    steps:
    - name: 📋 Monitoring Summary
      run: |
        echo "📋 Monitoring Summary"
        echo "===================="
        echo "Health Check: ${{ needs.health-check.result }}"
        echo "Performance Check: ${{ needs.performance-check.result }}"
        echo "Availability Check: ${{ needs.availability-check.result }}"
        echo "Security Check: ${{ needs.security-check.result }}"
        
        # Determine overall status
        if [[ "${{ needs.health-check.result }}" == "failure" || 
              "${{ needs.performance-check.result }}" == "failure" || 
              "${{ needs.availability-check.result }}" == "failure" || 
              "${{ needs.security-check.result }}" == "failure" ]]; then
          echo "❌ Some monitoring checks failed!"
          exit 1
        else
          echo "✅ All monitoring checks passed!"
        fi
