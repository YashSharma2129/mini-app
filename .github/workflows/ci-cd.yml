name: 🚀 Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scans every Monday at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ==========================================
  # CODE QUALITY & LINTING
  # ==========================================
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          './backend/package-lock.json'
          './frontend/package-lock.json'

    - name: 🔧 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🔧 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 📏 ESLint Backend
      working-directory: ./backend
      run: |
        npx eslint src/ --ext .js --format json --output-file eslint-report.json || true
        npx eslint src/ --ext .js --format stylish

    - name: 📏 ESLint Frontend
      working-directory: ./frontend
      run: |
        npx eslint src/ --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json || true
        npx eslint src/ --ext .js,.jsx,.ts,.tsx --format stylish

    - name: 💄 Prettier Check
      run: |
        npx prettier --check "backend/src/**/*.{js,json}" "frontend/src/**/*.{js,jsx,ts,tsx,json}" || true

    - name: 📊 Code Complexity Analysis
      run: |
        npx jscpd --min-lines 5 --min-tokens 50 --reporters json,console backend/src frontend/src || true

    - name: 📈 Upload ESLint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-reports
        path: |
          backend/eslint-report.json
          frontend/eslint-report.json

  # ==========================================
  # SECURITY SCANNING
  # ==========================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          './backend/package-lock.json'
          './frontend/package-lock.json'

    - name: 🔧 Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🛡️ NPM Audit Backend
      working-directory: ./backend
      run: |
        npm audit --audit-level moderate --json > audit-backend.json || true
        npm audit --audit-level moderate

    - name: 🛡️ NPM Audit Frontend
      working-directory: ./frontend
      run: |
        npm audit --audit-level moderate --json > audit-frontend.json || true
        npm audit --audit-level moderate

    - name: 🔍 Trivy Filesystem Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: 🔍 Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        image-ref: 'node:18-alpine'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: 🔐 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: 🔐 CodeQL Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 🔐 CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          audit-backend.json
          audit-frontend.json
          trivy-results.sarif
          trivy-container-results.sarif

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # COMPREHENSIVE TESTING
  # ==========================================
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trading_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          './backend/package-lock.json'
          './frontend/package-lock.json'

    - name: 🔧 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🔧 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🧪 Run Backend Unit Tests
      if: matrix.test-type == 'unit'
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_test
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npm run test:coverage
        npm run test -- --verbose --detectOpenHandles

    - name: 🧪 Run Frontend Unit Tests
      if: matrix.test-type == 'unit'
      working-directory: ./frontend
      run: |
        npm run test:coverage
        npm run test:run -- --reporter=verbose

    - name: 🧪 Run Integration Tests
      if: matrix.test-type == 'integration'
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_test
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npm test -- --testPathPattern=integration

    - name: 🧪 Run E2E Tests
      if: matrix.test-type == 'e2e'
      working-directory: ./frontend
      run: |
        npm run test:run -- --testPathPattern=e2e

    - name: 📊 Upload Test Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.test-type }}
        path: |
          backend/coverage/
          frontend/coverage/

  # ==========================================
  # PERFORMANCE TESTING
  # ==========================================
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trading_app_perf
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: 🔧 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🚀 Start Backend Server
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: trading_app_perf
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npm start &
        sleep 10

    - name: ⚡ Run Load Tests
      run: |
        npm install -g artillery
        artillery run --config backend/artillery.yml backend/load-tests.yml

    - name: 📊 Upload Performance Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          artillery-report.json
          lighthouse-report.json

  # ==========================================
  # ACCESSIBILITY TESTING
  # ==========================================
  accessibility:
    name: ♿ Accessibility Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: 🔧 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: ♿ Run Accessibility Tests
      working-directory: ./frontend
      run: |
        npm install -g pa11y-ci
        pa11y-ci --sitemap http://localhost:3000/sitemap.xml --reporter json > accessibility-report.json || true

    - name: 📊 Upload Accessibility Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports
        path: accessibility-report.json

  # ==========================================
  # BUILD & DOCKER IMAGES
  # ==========================================
  build:
    name: 🏗️ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security, performance, accessibility]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build and push backend image
      if: matrix.service == 'backend'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: 🏗️ Build and push frontend image
      if: matrix.service == 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: 🔍 Scan Docker Images
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-backend.sarif'
        severity: 'CRITICAL,HIGH'

    - name: 📊 Upload Image Scan Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-backend.sarif'

  # ==========================================
  # DEPLOYMENT VALIDATION
  # ==========================================
  deploy-validation:
    name: 🚀 Deployment Validation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🏗️ Deploy to Kubernetes
      run: |
        echo "🚀 Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
        
        # Update image tags in k8s manifests
        sed -i "s|ghcr.io/.*-backend:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}-${{ github.sha }}|g" k8s/backend.yaml
        sed -i "s|ghcr.io/.*-frontend:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}-${{ github.sha }}|g" k8s/frontend.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/frontend.yaml

    - name: ⏳ Wait for deployment
      run: |
        kubectl rollout status deployment/backend -n trading-app --timeout=300s
        kubectl rollout status deployment/frontend -n trading-app --timeout=300s

    - name: 🏥 Health Check
      run: |
        # Backend health check
        kubectl run test-backend --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://backend-service:5000/health
        
        # Frontend health check
        kubectl run test-frontend --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://frontend-service:80/health

    - name: 🧪 Run Smoke Tests
      run: |
        # Test critical endpoints
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          sh -c "
            curl -f http://backend-service:5000/api/products || exit 1
            curl -f http://frontend-service:80/ || exit 1
            echo '✅ Smoke tests passed'
          "

    - name: 📊 Rollback on Failure
      if: failure()
      run: |
        echo "❌ Deployment failed, rolling back..."
        kubectl rollout undo deployment/backend -n trading-app
        kubectl rollout undo deployment/frontend -n trading-app
        exit 1

  # ==========================================
  # NOTIFICATION
  # ==========================================
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [build, deploy-validation]
    if: always()
    
    steps:
    - name: 📢 Slack Notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Deployment Status: ${{ job.status }}
          📦 Service: Trading App
          🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          👤 Triggered by: ${{ github.actor }}
          🔗 Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📧 Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: '❌ Trading App Deployment Failed'
        body: |
          Deployment failed for Trading App
          
          Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please check the logs for details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}